/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by mockery v1.0.0

package mocks

import api "github.com/hyperledger/fabric-ca/api"
import lib "github.com/hyperledger/fabric-ca/lib"
import mock "github.com/stretchr/testify/mock"

// Credential is an autogenerated mock type for the Credential type
type Credential struct {
	mock.Mock
}

// CreateOAuthToken provides a mock function with given fields: reqBody
func (_m *Credential) CreateOAuthToken(reqBody []byte) (string, error) {
	ret := _m.Called(reqBody)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(reqBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrollmentID provides a mock function with given fields:
func (_m *Credential) EnrollmentID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields:
func (_m *Credential) Load() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeSelf provides a mock function with given fields:
func (_m *Credential) RevokeSelf() (*api.RevocationResponse, error) {
	ret := _m.Called()

	var r0 *api.RevocationResponse
	if rf, ok := ret.Get(0).(func() *api.RevocationResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.RevocationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVal provides a mock function with given fields: val
func (_m *Credential) SetVal(val interface{}) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields:
func (_m *Credential) Store() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Credential) Type() lib.CredentialType {
	ret := _m.Called()

	var r0 lib.CredentialType
	if rf, ok := ret.Get(0).(func() lib.CredentialType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lib.CredentialType)
	}

	return r0
}

// Val provides a mock function with given fields:
func (_m *Credential) Val() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
