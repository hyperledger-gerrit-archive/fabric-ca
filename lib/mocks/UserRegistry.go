/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by mockery v1.0.0

package mocks

import mock "github.com/stretchr/testify/mock"
import spi "github.com/hyperledger/fabric-ca/lib/spi"
import sqlx "github.com/jmoiron/sqlx"

// UserRegistry is an autogenerated mock type for the UserRegistry type
type UserRegistry struct {
	mock.Mock
}

// DeleteAffiliation provides a mock function with given fields: name, force, identityRemoval, isRegistrar
func (_m *UserRegistry) DeleteAffiliation(name string, force bool, identityRemoval bool, isRegistrar bool) (*spi.DbTxResult, error) {
	ret := _m.Called(name, force, identityRemoval, isRegistrar)

	var r0 *spi.DbTxResult
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool) *spi.DbTxResult); ok {
		r0 = rf(name, force, identityRemoval, isRegistrar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spi.DbTxResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, bool) error); ok {
		r1 = rf(name, force, identityRemoval, isRegistrar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRegistry) DeleteUser(id string) (spi.User, error) {
	ret := _m.Called(id)

	var r0 spi.User
	if rf, ok := ret.Get(0).(func(string) spi.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAffiliation provides a mock function with given fields: name
func (_m *UserRegistry) GetAffiliation(name string) (spi.Affiliation, error) {
	ret := _m.Called(name)

	var r0 spi.Affiliation
	if rf, ok := ret.Get(0).(func(string) spi.Affiliation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Affiliation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAffiliationTree provides a mock function with given fields: name
func (_m *UserRegistry) GetAffiliationTree(name string) (*spi.DbTxResult, error) {
	ret := _m.Called(name)

	var r0 *spi.DbTxResult
	if rf, ok := ret.Get(0).(func(string) *spi.DbTxResult); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spi.DbTxResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAffiliations provides a mock function with given fields: name
func (_m *UserRegistry) GetAllAffiliations(name string) (*sqlx.Rows, error) {
	ret := _m.Called(name)

	var r0 *sqlx.Rows
	if rf, ok := ret.Get(0).(func(string) *sqlx.Rows); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredUsers provides a mock function with given fields: affiliation, types
func (_m *UserRegistry) GetFilteredUsers(affiliation string, types string) (*sqlx.Rows, error) {
	ret := _m.Called(affiliation, types)

	var r0 *sqlx.Rows
	if rf, ok := ret.Get(0).(func(string, string) *sqlx.Rows); ok {
		r0 = rf(affiliation, types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(affiliation, types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProperties provides a mock function with given fields: name
func (_m *UserRegistry) GetProperties(name []string) (map[string]string, error) {
	ret := _m.Called(name)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func([]string) map[string]string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id, attrs
func (_m *UserRegistry) GetUser(id string, attrs []string) (spi.User, error) {
	ret := _m.Called(id, attrs)

	var r0 spi.User
	if rf, ok := ret.Get(0).(func(string, []string) spi.User); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLessThanLevel provides a mock function with given fields: version
func (_m *UserRegistry) GetUserLessThanLevel(version int) ([]spi.User, error) {
	ret := _m.Called(version)

	var r0 []spi.User
	if rf, ok := ret.Get(0).(func(int) []spi.User); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spi.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAffiliation provides a mock function with given fields: name, prekey, level
func (_m *UserRegistry) InsertAffiliation(name string, prekey string, level int) error {
	ret := _m.Called(name, prekey, level)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(name, prekey, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: user
func (_m *UserRegistry) InsertUser(user *spi.UserInfo) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*spi.UserInfo) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyAffiliation provides a mock function with given fields: oldAffiliation, newAffiliation, force, isRegistrar
func (_m *UserRegistry) ModifyAffiliation(oldAffiliation string, newAffiliation string, force bool, isRegistrar bool) (*spi.DbTxResult, error) {
	ret := _m.Called(oldAffiliation, newAffiliation, force, isRegistrar)

	var r0 *spi.DbTxResult
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) *spi.DbTxResult); ok {
		r0 = rf(oldAffiliation, newAffiliation, force, isRegistrar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spi.DbTxResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool) error); ok {
		r1 = rf(oldAffiliation, newAffiliation, force, isRegistrar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, updatePass
func (_m *UserRegistry) UpdateUser(user *spi.UserInfo, updatePass bool) error {
	ret := _m.Called(user, updatePass)

	var r0 error
	if rf, ok := ret.Get(0).(func(*spi.UserInfo, bool) error); ok {
		r0 = rf(user, updatePass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
