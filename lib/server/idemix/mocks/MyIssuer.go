/*
Copyright IBM Corp. 2018 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by mockery v1.0.0

package mocks

import amcl "github.com/hyperledger/fabric-amcl/amcl"
import dbutil "github.com/hyperledger/fabric-ca/lib/dbutil"
import idemix "github.com/hyperledger/fabric-ca/lib/server/idemix"
import mock "github.com/stretchr/testify/mock"

// MyIssuer is an autogenerated mock type for the MyIssuer type
type MyIssuer struct {
	mock.Mock
}

// CredDBAccessor provides a mock function with given fields:
func (_m *MyIssuer) CredDBAccessor() idemix.CredDBAccessor {
	ret := _m.Called()

	var r0 idemix.CredDBAccessor
	if rf, ok := ret.Get(0).(func() idemix.CredDBAccessor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(idemix.CredDBAccessor)
		}
	}

	return r0
}

// DB provides a mock function with given fields:
func (_m *MyIssuer) DB() dbutil.FabricCADB {
	ret := _m.Called()

	var r0 dbutil.FabricCADB
	if rf, ok := ret.Get(0).(func() dbutil.FabricCADB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbutil.FabricCADB)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *MyIssuer) Config() *idemix.Config {
	ret := _m.Called()

	var r0 *idemix.Config
	if rf, ok := ret.Get(0).(func() *idemix.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idemix.Config)
		}
	}

	return r0
}

// IdemixLib provides a mock function with given fields:
func (_m *MyIssuer) IdemixLib() idemix.Lib {
	ret := _m.Called()

	var r0 idemix.Lib
	if rf, ok := ret.Get(0).(func() idemix.Lib); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(idemix.Lib)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MyIssuer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IdemixRand provides a mock function with given fields:
func (_m *MyIssuer) IdemixRand() *amcl.RAND {
	ret := _m.Called()

	var r0 *amcl.RAND
	if rf, ok := ret.Get(0).(func() *amcl.RAND); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amcl.RAND)
		}
	}

	return r0
}

// IssuerCredential provides a mock function with given fields:
func (_m *MyIssuer) IssuerCredential() idemix.IssuerCredential {
	ret := _m.Called()

	var r0 idemix.IssuerCredential
	if rf, ok := ret.Get(0).(func() idemix.IssuerCredential); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(idemix.IssuerCredential)
		}
	}

	return r0
}

// NonceManager provides a mock function with given fields:
func (_m *MyIssuer) NonceManager() idemix.NonceManager {
	ret := _m.Called()

	var r0 idemix.NonceManager
	if rf, ok := ret.Get(0).(func() idemix.NonceManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(idemix.NonceManager)
		}
	}

	return r0
}

// RevocationAuthority provides a mock function with given fields:
func (_m *MyIssuer) RevocationAuthority() idemix.RevocationAuthority {
	ret := _m.Called()

	var r0 idemix.RevocationAuthority
	if rf, ok := ret.Get(0).(func() idemix.RevocationAuthority); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(idemix.RevocationAuthority)
		}
	}

	return r0
}
